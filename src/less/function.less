.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}
.position(@p; @x; @y) {
  position: @p;
  .axis_y(@y) when (length(@y) = 1) {
    top: @y;
  }.axis_y(@y);
  .axis_y(@y) when (length(@y) = 2) {
    @property: extract(@y, 1);
    @{property}: extract(@y, 2);
  }.axis_y(@y);
  .axis_x(@x) when (length(@x) = 1) {
    left: @x;
  }.axis_x(@x);
  .axis_x(@x) when (length(@x) = 2) {
    @property: extract(@x, 1);
    @{property}: extract(@x, 2);
  }.axis_x(@x);
}
.selection(@color, @opacity) {
  ::selection {
    color: @color;
    background: fade(@color, @opacity);
    text-shadow: none;
  }
}
.placeholder_style(@property; @value) {
  &::-webkit-input-placeholder {@{property}: @value;} //
  &:-moz-placeholder           {@{property}: @value;} // non-standard prefix
  &::-moz-placeholder          {@{property}: @value;} //
}
.scrollbar(...) {
  &::-webkit-scrollbar { // non-standard prefix
    @arguments();
  }
}
.scrollbar_thumb(...) {
  &::-webkit-scrollbar-thumb { // non-standard prefix
    @arguments();
  }
}
.scrollbar_inner() {
                  .scrollbar({ width: .5em;                    });
            .scrollbar_thumb({ background: fade(@white, 0);    });
  &:hover { .scrollbar_thumb({ background: @color_chat_border; }); }
}
.icon(@type; @value) {
  .iconpile {
    .stroke(@type; @value) when (@type = stroke) {
      [class|="stroke"] {
        .width(@value) when (isnumber(@value)) {stroke-width: @value;}.width(@value);
        .color(@value) when  (iscolor(@value)) {stroke:       @value;}.color(@value);
      }
    }.stroke(@type; @value);
    .fill(@type; @value) when (@type = fill) {
      [class|="fill"] {
        .color(@value) when (iscolor(@value)) {fill: @value;}.color(@value);
      }
    }.fill(@type; @value);
  }
}
.to_em(@a) when (ispixel(@a)) {
  @concat: (unit(@a) / unit(@font_size));
  @to_em: ~"@{concat}em";
}
.random_cascade(@c) when (@c > 0) {
  .random_cascade((@c - 1));
  @random: `Math.random()`;
  &:nth-of-type(@{c}) {
    transition-delay: round(@run_faster * (@random * 10));
  }
}
.button_icon_cascade(@c) when (@c > 0) {
  .button_icon_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    i {
      transition-delay: (@run_faster * @c);
    }
  }
}
.button_fade_cascade(@c) when (@c > 0) {
  .button_fade_cascade((@c - 1));
  &:nth-of-type(@{c}) {
    object {
      transition-delay: (@run_faster * 5) + (@run_faster * @c);
    }
  }
}
.transition_cascade(@c) when (@c > 0) {
  .transition_cascade((@c - 1));
  &:nth-child(@{c}) {
    transition-delay: @run_faster * @c;
  }
}
.animation_cascade(@c) when (@c > 0) {
  .animation_cascade((@c - 1));
  &:nth-child(@{c}) {
    animation-delay: @run_faster * @c;
  }
}
.outline(@color: @gray_lighter) {
  box-shadow+:  0    1px @color;
  box-shadow+:  0   -1px @color;
  box-shadow+:  1px  0   @color;
  box-shadow+: -1px  0   @color;
}
.inline(@color: @gray_lighter; @width: 1px) {
  box-shadow+:  0    @width @color inset;
  box-shadow+:  0   -@width @color inset;
  box-shadow+:  @width  0   @color inset;
  box-shadow+: -@width  0   @color inset;
}
.shadow_inset(@position; @black; @white) {
  .top(@arguments) when (@position = top) {
    box-shadow+: 0 -1px @black;
    box-shadow+: 0  1px @white inset;
  }.top(@arguments);
  .btm(@arguments) when (@position = bottom) {
    box-shadow+: 0 -1px @black inset;
    box-shadow+: 0  1px @white;
  }.btm(@arguments);
}
.gradient(@type; @rest...) {
  @colors: ~`"@{rest}".slice(1,-1)`;
  background-image+: linear-gradient(@type, @colors);
}
.font-smoothing(@a: antialiased) {
  .aa(@a) when (@a = antialiased) {
    -webkit-font-smoothing: @a;         // non-standard prefix
    -moz-osx-font-smoothing: grayscale; //
  }.aa(@a);
}
.h1() {
  font-size: 4.0em;
  font-weight: 300;
  line-height: 1.25;
  // .mq_640({
  //   font-size: 3.0em;
  // });
}
.h2() {
  font-size: 2em + (2 * (1 / 3));
  font-weight: 300;
  line-height: 1.5;
  // .mq_640({
  //   font-size: 2.0em;
  // });
}
.h3() {
  font-size: 2.0em;
  line-height: 1 + (1 / 3);
  font-weight: 400;
  // .mq_640({
  //   font-size: 1.5em;
  // });
}
.h4() {
  font-size: 1.5em;
  line-height: 1 + (1 / 3);
  font-weight: 400;
}
.h5() {
  font-size: 1.0em;
  line-height: 1.5;
  font-weight: 400;
}
.h6() {
  font-size: .75em;
  line-height: 1.5;
  font-weight: 400;
}
.hr() {
  box-sizing: content-box;
  height: 0;
}
/*‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾*\
)                                                                BREAKPOINTS   (
\*____________________________________________________________________________*/
.mq_1920(@rules) {
  @media screen and (max-width: 1920px) { @rules(); }
}
.mq_1600(@rules) {
  @media screen and (max-width: 1600px) { @rules(); }
}
.mq_1280(@rules) {
  @media screen and (max-width: 1280px) { @rules(); }
}
.mq_960(@rules) {
  @media screen and (max-width: 960px) { @rules(); }
}
.mq_640(@rules) {
  @media screen and (max-width: 640px) { @rules(); }
}

